//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommonLib.AwesomeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IssueItem", Namespace="http://schemas.datacontract.org/2004/07/Ut.Data")]
    [System.SerializableAttribute()]
    public partial class IssueItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WKTField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WKT {
            get {
                return this.WKTField;
            }
            set {
                if ((object.ReferenceEquals(this.WKTField, value) != true)) {
                    this.WKTField = value;
                    this.RaisePropertyChanged("WKT");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AwesomeService.IGeoDataService", CallbackContract=typeof(CommonLib.AwesomeService.IGeoDataServiceCallback))]
    public interface IGeoDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/AddIssue", ReplyAction="http://tempuri.org/IGeoDataService/AddIssueResponse")]
        bool AddIssue(CommonLib.AwesomeService.IssueItem issue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/AddIssue", ReplyAction="http://tempuri.org/IGeoDataService/AddIssueResponse")]
        System.Threading.Tasks.Task<bool> AddIssueAsync(CommonLib.AwesomeService.IssueItem issue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/UpdateIssue", ReplyAction="http://tempuri.org/IGeoDataService/UpdateIssueResponse")]
        bool UpdateIssue(CommonLib.AwesomeService.IssueItem issue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/UpdateIssue", ReplyAction="http://tempuri.org/IGeoDataService/UpdateIssueResponse")]
        System.Threading.Tasks.Task<bool> UpdateIssueAsync(CommonLib.AwesomeService.IssueItem issue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/RemoveIssueBy", ReplyAction="http://tempuri.org/IGeoDataService/RemoveIssueByResponse")]
        bool RemoveIssueBy(int issueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/RemoveIssueBy", ReplyAction="http://tempuri.org/IGeoDataService/RemoveIssueByResponse")]
        System.Threading.Tasks.Task<bool> RemoveIssueByAsync(int issueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/GetAllIssues", ReplyAction="http://tempuri.org/IGeoDataService/GetAllIssuesResponse")]
        CommonLib.AwesomeService.IssueItem[] GetAllIssues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/GetAllIssues", ReplyAction="http://tempuri.org/IGeoDataService/GetAllIssuesResponse")]
        System.Threading.Tasks.Task<CommonLib.AwesomeService.IssueItem[]> GetAllIssuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/GetItemBy", ReplyAction="http://tempuri.org/IGeoDataService/GetItemByResponse")]
        CommonLib.AwesomeService.IssueItem GetItemBy(int issueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoDataService/GetItemBy", ReplyAction="http://tempuri.org/IGeoDataService/GetItemByResponse")]
        System.Threading.Tasks.Task<CommonLib.AwesomeService.IssueItem> GetItemByAsync(int issueId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeoDataServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGeoDataService/IssueAdded")]
        void IssueAdded(CommonLib.AwesomeService.IssueItem issue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeoDataServiceChannel : CommonLib.AwesomeService.IGeoDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeoDataServiceClient : System.ServiceModel.DuplexClientBase<CommonLib.AwesomeService.IGeoDataService>, CommonLib.AwesomeService.IGeoDataService {
        
        public GeoDataServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GeoDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GeoDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GeoDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GeoDataServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool AddIssue(CommonLib.AwesomeService.IssueItem issue) {
            return base.Channel.AddIssue(issue);
        }
        
        public System.Threading.Tasks.Task<bool> AddIssueAsync(CommonLib.AwesomeService.IssueItem issue) {
            return base.Channel.AddIssueAsync(issue);
        }
        
        public bool UpdateIssue(CommonLib.AwesomeService.IssueItem issue) {
            return base.Channel.UpdateIssue(issue);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateIssueAsync(CommonLib.AwesomeService.IssueItem issue) {
            return base.Channel.UpdateIssueAsync(issue);
        }
        
        public bool RemoveIssueBy(int issueId) {
            return base.Channel.RemoveIssueBy(issueId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveIssueByAsync(int issueId) {
            return base.Channel.RemoveIssueByAsync(issueId);
        }
        
        public CommonLib.AwesomeService.IssueItem[] GetAllIssues() {
            return base.Channel.GetAllIssues();
        }
        
        public System.Threading.Tasks.Task<CommonLib.AwesomeService.IssueItem[]> GetAllIssuesAsync() {
            return base.Channel.GetAllIssuesAsync();
        }
        
        public CommonLib.AwesomeService.IssueItem GetItemBy(int issueId) {
            return base.Channel.GetItemBy(issueId);
        }
        
        public System.Threading.Tasks.Task<CommonLib.AwesomeService.IssueItem> GetItemByAsync(int issueId) {
            return base.Channel.GetItemByAsync(issueId);
        }
    }
}
